// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var dnn_serial3 = dnn_serial3 || {};

/**
 * @constructor
 */
dnn_serial3.TensorData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {dnn_serial3.TensorData}
 */
dnn_serial3.TensorData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.TensorData=} obj
 * @returns {dnn_serial3.TensorData}
 */
dnn_serial3.TensorData.getRootAsTensorData = function(bb, obj) {
  return (obj || new dnn_serial3.TensorData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.TensorData=} obj
 * @returns {dnn_serial3.TensorData}
 */
dnn_serial3.TensorData.getSizePrefixedRootAsTensorData = function(bb, obj) {
  return (obj || new dnn_serial3.TensorData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {dnn_serial3.DataType}
 */
dnn_serial3.TensorData.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {dnn_serial3.DataType} */ (this.bb.readInt8(this.bb_pos + offset)) : dnn_serial3.DataType.Unspecified;
};

/**
 * @param {number} index
 * @returns {number}
 */
dnn_serial3.TensorData.prototype.UBytes = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
dnn_serial3.TensorData.prototype.UBytesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
dnn_serial3.TensorData.prototype.UBytesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
dnn_serial3.TensorData.prototype.Floats = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
dnn_serial3.TensorData.prototype.FloatsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
dnn_serial3.TensorData.prototype.FloatsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
dnn_serial3.TensorData.startTensorData = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {dnn_serial3.DataType} type
 */
dnn_serial3.TensorData.addType = function(builder, type) {
  builder.addFieldInt8(0, type, dnn_serial3.DataType.Unspecified);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} UBytesOffset
 */
dnn_serial3.TensorData.addUBytes = function(builder, UBytesOffset) {
  builder.addFieldOffset(1, UBytesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.TensorData.createUBytesVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.TensorData.startUBytesVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} FloatsOffset
 */
dnn_serial3.TensorData.addFloats = function(builder, FloatsOffset) {
  builder.addFieldOffset(2, FloatsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.TensorData.createFloatsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.TensorData.startFloatsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.TensorData.endTensorData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {NS3988024701786621221.dnn_serial3.DataType} type
 * @param {flatbuffers.Offset} UBytesOffset
 * @param {flatbuffers.Offset} FloatsOffset
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.TensorData.createTensorData = function(builder, type, UBytesOffset, FloatsOffset) {
  dnn_serial3.TensorData.startTensorData(builder);
  dnn_serial3.TensorData.addType(builder, type);
  dnn_serial3.TensorData.addUBytes(builder, UBytesOffset);
  dnn_serial3.TensorData.addFloats(builder, FloatsOffset);
  return dnn_serial3.TensorData.endTensorData(builder);
}

/**
 * @constructor
 */
dnn_serial3.Tensor = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {dnn_serial3.Tensor}
 */
dnn_serial3.Tensor.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.Tensor=} obj
 * @returns {dnn_serial3.Tensor}
 */
dnn_serial3.Tensor.getRootAsTensor = function(bb, obj) {
  return (obj || new dnn_serial3.Tensor).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.Tensor=} obj
 * @returns {dnn_serial3.Tensor}
 */
dnn_serial3.Tensor.getSizePrefixedRootAsTensor = function(bb, obj) {
  return (obj || new dnn_serial3.Tensor).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
dnn_serial3.Tensor.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
dnn_serial3.Tensor.prototype.dims = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
dnn_serial3.Tensor.prototype.dimsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint32Array}
 */
dnn_serial3.Tensor.prototype.dimsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {dnn_serial3.TensorData=} obj
 * @returns {dnn_serial3.TensorData|null}
 */
dnn_serial3.Tensor.prototype.data = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new dnn_serial3.TensorData).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {number} index
 * @param {dnn_serial3.Argument=} obj
 * @returns {dnn_serial3.Argument}
 */
dnn_serial3.Tensor.prototype.args = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new dnn_serial3.Argument).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Tensor.prototype.argsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
dnn_serial3.Tensor.startTensor = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
dnn_serial3.Tensor.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dimsOffset
 */
dnn_serial3.Tensor.addDims = function(builder, dimsOffset) {
  builder.addFieldOffset(1, dimsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Tensor.createDimsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Tensor.startDimsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
dnn_serial3.Tensor.addData = function(builder, dataOffset) {
  builder.addFieldOffset(2, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} argsOffset
 */
dnn_serial3.Tensor.addArgs = function(builder, argsOffset) {
  builder.addFieldOffset(3, argsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Tensor.createArgsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Tensor.startArgsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Tensor.endTensor = function(builder) {
  var offset = builder.endObject();
  builder.requiredField(offset, 4); // name
  builder.requiredField(offset, 6); // dims
  builder.requiredField(offset, 8); // data
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} dimsOffset
 * @param {flatbuffers.Offset} dataOffset
 * @param {flatbuffers.Offset} argsOffset
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Tensor.createTensor = function(builder, nameOffset, dimsOffset, dataOffset, argsOffset) {
  dnn_serial3.Tensor.startTensor(builder);
  dnn_serial3.Tensor.addName(builder, nameOffset);
  dnn_serial3.Tensor.addDims(builder, dimsOffset);
  dnn_serial3.Tensor.addData(builder, dataOffset);
  dnn_serial3.Tensor.addArgs(builder, argsOffset);
  return dnn_serial3.Tensor.endTensor(builder);
}

/**
 * @constructor
 */
dnn_serial3.LayerParams = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {dnn_serial3.LayerParams}
 */
dnn_serial3.LayerParams.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.LayerParams=} obj
 * @returns {dnn_serial3.LayerParams}
 */
dnn_serial3.LayerParams.getRootAsLayerParams = function(bb, obj) {
  return (obj || new dnn_serial3.LayerParams).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.LayerParams=} obj
 * @returns {dnn_serial3.LayerParams}
 */
dnn_serial3.LayerParams.getSizePrefixedRootAsLayerParams = function(bb, obj) {
  return (obj || new dnn_serial3.LayerParams).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
dnn_serial3.LayerParams.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {dnn_serial3.Tensor=} obj
 * @returns {dnn_serial3.Tensor}
 */
dnn_serial3.LayerParams.prototype.tensors = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new dnn_serial3.Tensor).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.LayerParams.prototype.tensorsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
dnn_serial3.LayerParams.startLayerParams = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
dnn_serial3.LayerParams.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} tensorsOffset
 */
dnn_serial3.LayerParams.addTensors = function(builder, tensorsOffset) {
  builder.addFieldOffset(1, tensorsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.LayerParams.createTensorsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.LayerParams.startTensorsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.LayerParams.endLayerParams = function(builder) {
  var offset = builder.endObject();
  builder.requiredField(offset, 4); // name
  builder.requiredField(offset, 6); // tensors
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} tensorsOffset
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.LayerParams.createLayerParams = function(builder, nameOffset, tensorsOffset) {
  dnn_serial3.LayerParams.startLayerParams(builder);
  dnn_serial3.LayerParams.addName(builder, nameOffset);
  dnn_serial3.LayerParams.addTensors(builder, tensorsOffset);
  return dnn_serial3.LayerParams.endLayerParams(builder);
}

/**
 * @constructor
 */
dnn_serial3.NetworkParams = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {dnn_serial3.NetworkParams}
 */
dnn_serial3.NetworkParams.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.NetworkParams=} obj
 * @returns {dnn_serial3.NetworkParams}
 */
dnn_serial3.NetworkParams.getRootAsNetworkParams = function(bb, obj) {
  return (obj || new dnn_serial3.NetworkParams).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.NetworkParams=} obj
 * @returns {dnn_serial3.NetworkParams}
 */
dnn_serial3.NetworkParams.getSizePrefixedRootAsNetworkParams = function(bb, obj) {
  return (obj || new dnn_serial3.NetworkParams).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {boolean}
 */
dnn_serial3.NetworkParams.bufferHasIdentifier = function(bb) {
  return bb.__has_identifier('NETP');
};

/**
 * @param {number} index
 * @param {dnn_serial3.LayerParams=} obj
 * @returns {dnn_serial3.LayerParams}
 */
dnn_serial3.NetworkParams.prototype.layerParams = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new dnn_serial3.LayerParams).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.NetworkParams.prototype.layerParamsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
dnn_serial3.NetworkParams.startNetworkParams = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} layerParamsOffset
 */
dnn_serial3.NetworkParams.addLayerParams = function(builder, layerParamsOffset) {
  builder.addFieldOffset(0, layerParamsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.NetworkParams.createLayerParamsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.NetworkParams.startLayerParamsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.NetworkParams.endNetworkParams = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
dnn_serial3.NetworkParams.finishNetworkParamsBuffer = function(builder, offset) {
  builder.finish(offset, 'NETP');
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
dnn_serial3.NetworkParams.finishSizePrefixedNetworkParamsBuffer = function(builder, offset) {
  builder.finish(offset, 'NETP', true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} layerParamsOffset
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.NetworkParams.createNetworkParams = function(builder, layerParamsOffset) {
  dnn_serial3.NetworkParams.startNetworkParams(builder);
  dnn_serial3.NetworkParams.addLayerParams(builder, layerParamsOffset);
  return dnn_serial3.NetworkParams.endNetworkParams(builder);
}

// Exports for Node.js and RequireJS
this.dnn_serial3 = dnn_serial3;
