// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var dnn_serial3 = dnn_serial3 || {};

/**
 * @enum {number}
 */
dnn_serial3.DataType = {
  Unspecified: 0,
  Boolean: 1,
  Int: 2,
  UInt: 3,
  Float: 4,
  String: 5,
  UBytes: 6,
  Ints: 7,
  UInts: 8,
  Floats: 9,
  Strings: 10,
  Argument: 11
};

/**
 * @enum {string}
 */
dnn_serial3.DataTypeName = {
  0: 'Unspecified',
  1: 'Boolean',
  2: 'Int',
  3: 'UInt',
  4: 'Float',
  5: 'String',
  6: 'UBytes',
  7: 'Ints',
  8: 'UInts',
  9: 'Floats',
  10: 'Strings',
  11: 'Argument'
};

/**
 * @constructor
 */
dnn_serial3.Argument = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {dnn_serial3.Argument}
 */
dnn_serial3.Argument.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.Argument=} obj
 * @returns {dnn_serial3.Argument}
 */
dnn_serial3.Argument.getRootAsArgument = function(bb, obj) {
  return (obj || new dnn_serial3.Argument).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.Argument=} obj
 * @returns {dnn_serial3.Argument}
 */
dnn_serial3.Argument.getSizePrefixedRootAsArgument = function(bb, obj) {
  return (obj || new dnn_serial3.Argument).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
dnn_serial3.Argument.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {dnn_serial3.DataType}
 */
dnn_serial3.Argument.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {dnn_serial3.DataType} */ (this.bb.readInt8(this.bb_pos + offset)) : dnn_serial3.DataType.Unspecified;
};

/**
 * @returns {boolean}
 */
dnn_serial3.Argument.prototype.Boolean = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {number}
 */
dnn_serial3.Argument.prototype.Int = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
dnn_serial3.Argument.prototype.UInt = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
dnn_serial3.Argument.prototype.Float = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
dnn_serial3.Argument.prototype.String = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
dnn_serial3.Argument.prototype.UBytes = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
dnn_serial3.Argument.prototype.UBytesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
dnn_serial3.Argument.prototype.UBytesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
dnn_serial3.Argument.prototype.Ints = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
dnn_serial3.Argument.prototype.IntsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
dnn_serial3.Argument.prototype.IntsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
dnn_serial3.Argument.prototype.UInts = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.readUint32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
dnn_serial3.Argument.prototype.UIntsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint32Array}
 */
dnn_serial3.Argument.prototype.UIntsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
dnn_serial3.Argument.prototype.Floats = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
dnn_serial3.Argument.prototype.FloatsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
dnn_serial3.Argument.prototype.FloatsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
dnn_serial3.Argument.prototype.Strings = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Argument.prototype.StringsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 26);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {dnn_serial3.Argument=} obj
 * @returns {dnn_serial3.Argument}
 */
dnn_serial3.Argument.prototype.Args = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? (obj || new dnn_serial3.Argument).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Argument.prototype.ArgsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 28);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
dnn_serial3.Argument.startArgument = function(builder) {
  builder.startObject(13);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
dnn_serial3.Argument.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {dnn_serial3.DataType} type
 */
dnn_serial3.Argument.addType = function(builder, type) {
  builder.addFieldInt8(1, type, dnn_serial3.DataType.Unspecified);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} Boolean
 */
dnn_serial3.Argument.addBoolean = function(builder, Boolean) {
  builder.addFieldInt8(2, +Boolean, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} Int
 */
dnn_serial3.Argument.addInt = function(builder, Int) {
  builder.addFieldInt32(3, Int, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} UInt
 */
dnn_serial3.Argument.addUInt = function(builder, UInt) {
  builder.addFieldInt32(4, UInt, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} Float
 */
dnn_serial3.Argument.addFloat = function(builder, Float) {
  builder.addFieldFloat32(5, Float, 0.0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} StringOffset
 */
dnn_serial3.Argument.addString = function(builder, StringOffset) {
  builder.addFieldOffset(6, StringOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} UBytesOffset
 */
dnn_serial3.Argument.addUBytes = function(builder, UBytesOffset) {
  builder.addFieldOffset(7, UBytesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Argument.createUBytesVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Argument.startUBytesVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} IntsOffset
 */
dnn_serial3.Argument.addInts = function(builder, IntsOffset) {
  builder.addFieldOffset(8, IntsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Argument.createIntsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Argument.startIntsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} UIntsOffset
 */
dnn_serial3.Argument.addUInts = function(builder, UIntsOffset) {
  builder.addFieldOffset(9, UIntsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Argument.createUIntsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Argument.startUIntsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} FloatsOffset
 */
dnn_serial3.Argument.addFloats = function(builder, FloatsOffset) {
  builder.addFieldOffset(10, FloatsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Argument.createFloatsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Argument.startFloatsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} StringsOffset
 */
dnn_serial3.Argument.addStrings = function(builder, StringsOffset) {
  builder.addFieldOffset(11, StringsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Argument.createStringsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Argument.startStringsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} ArgsOffset
 */
dnn_serial3.Argument.addArgs = function(builder, ArgsOffset) {
  builder.addFieldOffset(12, ArgsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Argument.createArgsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Argument.startArgsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Argument.endArgument = function(builder) {
  var offset = builder.endObject();
  builder.requiredField(offset, 4); // name
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {dnn_serial3.DataType} type
 * @param {boolean} Boolean
 * @param {number} Int
 * @param {number} UInt
 * @param {number} Float
 * @param {flatbuffers.Offset} StringOffset
 * @param {flatbuffers.Offset} UBytesOffset
 * @param {flatbuffers.Offset} IntsOffset
 * @param {flatbuffers.Offset} UIntsOffset
 * @param {flatbuffers.Offset} FloatsOffset
 * @param {flatbuffers.Offset} StringsOffset
 * @param {flatbuffers.Offset} ArgsOffset
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Argument.createArgument = function(builder, nameOffset, type, Boolean, Int, UInt, Float, StringOffset, UBytesOffset, IntsOffset, UIntsOffset, FloatsOffset, StringsOffset, ArgsOffset) {
  dnn_serial3.Argument.startArgument(builder);
  dnn_serial3.Argument.addName(builder, nameOffset);
  dnn_serial3.Argument.addType(builder, type);
  dnn_serial3.Argument.addBoolean(builder, Boolean);
  dnn_serial3.Argument.addInt(builder, Int);
  dnn_serial3.Argument.addUInt(builder, UInt);
  dnn_serial3.Argument.addFloat(builder, Float);
  dnn_serial3.Argument.addString(builder, StringOffset);
  dnn_serial3.Argument.addUBytes(builder, UBytesOffset);
  dnn_serial3.Argument.addInts(builder, IntsOffset);
  dnn_serial3.Argument.addUInts(builder, UIntsOffset);
  dnn_serial3.Argument.addFloats(builder, FloatsOffset);
  dnn_serial3.Argument.addStrings(builder, StringsOffset);
  dnn_serial3.Argument.addArgs(builder, ArgsOffset);
  return dnn_serial3.Argument.endArgument(builder);
}

// Exports for Node.js and RequireJS
this.dnn_serial3 = dnn_serial3;
