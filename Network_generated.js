// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var dnn_serial3 = dnn_serial3 || {};

/**
 * @constructor
 */
dnn_serial3.Layer = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {dnn_serial3.Layer}
 */
dnn_serial3.Layer.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.Layer=} obj
 * @returns {dnn_serial3.Layer}
 */
dnn_serial3.Layer.getRootAsLayer = function(bb, obj) {
  return (obj || new dnn_serial3.Layer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.Layer=} obj
 * @returns {dnn_serial3.Layer}
 */
dnn_serial3.Layer.getSizePrefixedRootAsLayer = function(bb, obj) {
  return (obj || new dnn_serial3.Layer).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
dnn_serial3.Layer.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
dnn_serial3.Layer.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
dnn_serial3.Layer.prototype.type = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
dnn_serial3.Layer.prototype.inputs = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Layer.prototype.inputsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
dnn_serial3.Layer.prototype.outputs = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Layer.prototype.outputsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {dnn_serial3.Argument=} obj
 * @returns {dnn_serial3.Argument}
 */
dnn_serial3.Layer.prototype.args = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? (obj || new dnn_serial3.Argument).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Layer.prototype.argsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
dnn_serial3.Layer.startLayer = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
dnn_serial3.Layer.addId = function(builder, id) {
  builder.addFieldInt32(0, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
dnn_serial3.Layer.addName = function(builder, nameOffset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} typeOffset
 */
dnn_serial3.Layer.addType = function(builder, typeOffset) {
  builder.addFieldOffset(2, typeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inputsOffset
 */
dnn_serial3.Layer.addInputs = function(builder, inputsOffset) {
  builder.addFieldOffset(3, inputsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Layer.createInputsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Layer.startInputsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} outputsOffset
 */
dnn_serial3.Layer.addOutputs = function(builder, outputsOffset) {
  builder.addFieldOffset(4, outputsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Layer.createOutputsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Layer.startOutputsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} argsOffset
 */
dnn_serial3.Layer.addArgs = function(builder, argsOffset) {
  builder.addFieldOffset(5, argsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Layer.createArgsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Layer.startArgsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Layer.endLayer = function(builder) {
  var offset = builder.endObject();
  builder.requiredField(offset, 6); // name
  builder.requiredField(offset, 8); // type
  builder.requiredField(offset, 10); // inputs
  builder.requiredField(offset, 12); // outputs
  builder.requiredField(offset, 14); // args
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} typeOffset
 * @param {flatbuffers.Offset} inputsOffset
 * @param {flatbuffers.Offset} outputsOffset
 * @param {flatbuffers.Offset} argsOffset
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Layer.createLayer = function(builder, id, nameOffset, typeOffset, inputsOffset, outputsOffset, argsOffset) {
  dnn_serial3.Layer.startLayer(builder);
  dnn_serial3.Layer.addId(builder, id);
  dnn_serial3.Layer.addName(builder, nameOffset);
  dnn_serial3.Layer.addType(builder, typeOffset);
  dnn_serial3.Layer.addInputs(builder, inputsOffset);
  dnn_serial3.Layer.addOutputs(builder, outputsOffset);
  dnn_serial3.Layer.addArgs(builder, argsOffset);
  return dnn_serial3.Layer.endLayer(builder);
}

/**
 * @constructor
 */
dnn_serial3.Network = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {dnn_serial3.Network}
 */
dnn_serial3.Network.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.Network=} obj
 * @returns {dnn_serial3.Network}
 */
dnn_serial3.Network.getRootAsNetwork = function(bb, obj) {
  return (obj || new dnn_serial3.Network).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {dnn_serial3.Network=} obj
 * @returns {dnn_serial3.Network}
 */
dnn_serial3.Network.getSizePrefixedRootAsNetwork = function(bb, obj) {
  return (obj || new dnn_serial3.Network).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {boolean}
 */
dnn_serial3.Network.bufferHasIdentifier = function(bb) {
  return bb.__has_identifier('NETD');
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
dnn_serial3.Network.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {dnn_serial3.Layer=} obj
 * @returns {dnn_serial3.Layer}
 */
dnn_serial3.Network.prototype.layers = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new dnn_serial3.Layer).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Network.prototype.layersLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
dnn_serial3.Network.prototype.externalInputs = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Network.prototype.externalInputsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
dnn_serial3.Network.prototype.externalOutputs = function(index, optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Network.prototype.externalOutputsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {dnn_serial3.Argument=} obj
 * @returns {dnn_serial3.Argument}
 */
dnn_serial3.Network.prototype.args = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new dnn_serial3.Argument).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
dnn_serial3.Network.prototype.argsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
dnn_serial3.Network.startNetwork = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
dnn_serial3.Network.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} layersOffset
 */
dnn_serial3.Network.addLayers = function(builder, layersOffset) {
  builder.addFieldOffset(1, layersOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Network.createLayersVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Network.startLayersVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} externalInputsOffset
 */
dnn_serial3.Network.addExternalInputs = function(builder, externalInputsOffset) {
  builder.addFieldOffset(2, externalInputsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Network.createExternalInputsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Network.startExternalInputsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} externalOutputsOffset
 */
dnn_serial3.Network.addExternalOutputs = function(builder, externalOutputsOffset) {
  builder.addFieldOffset(3, externalOutputsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Network.createExternalOutputsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Network.startExternalOutputsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} argsOffset
 */
dnn_serial3.Network.addArgs = function(builder, argsOffset) {
  builder.addFieldOffset(4, argsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Network.createArgsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
dnn_serial3.Network.startArgsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Network.endNetwork = function(builder) {
  var offset = builder.endObject();
  builder.requiredField(offset, 6); // layers
  builder.requiredField(offset, 8); // external_inputs
  builder.requiredField(offset, 10); // external_outputs
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
dnn_serial3.Network.finishNetworkBuffer = function(builder, offset) {
  builder.finish(offset, 'NETD');
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
dnn_serial3.Network.finishSizePrefixedNetworkBuffer = function(builder, offset) {
  builder.finish(offset, 'NETD', true);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} layersOffset
 * @param {flatbuffers.Offset} externalInputsOffset
 * @param {flatbuffers.Offset} externalOutputsOffset
 * @param {flatbuffers.Offset} argsOffset
 * @returns {flatbuffers.Offset}
 */
dnn_serial3.Network.createNetwork = function(builder, nameOffset, layersOffset, externalInputsOffset, externalOutputsOffset, argsOffset) {
  dnn_serial3.Network.startNetwork(builder);
  dnn_serial3.Network.addName(builder, nameOffset);
  dnn_serial3.Network.addLayers(builder, layersOffset);
  dnn_serial3.Network.addExternalInputs(builder, externalInputsOffset);
  dnn_serial3.Network.addExternalOutputs(builder, externalOutputsOffset);
  dnn_serial3.Network.addArgs(builder, argsOffset);
  return dnn_serial3.Network.endNetwork(builder);
}

// Exports for Node.js and RequireJS
this.dnn_serial3 = dnn_serial3;
